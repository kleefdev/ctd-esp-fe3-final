{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clifo\\\\OneDrive\\\\Desktop\\\\fe3-final-cjl\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer, useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  dentists: [],\n  theme: \"light\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(initialState);\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  const appReducer = (state, action) => {\n    switch (action.type) {\n      case 'TOGGLE_FAVORITE':\n        const dentistId = action.payload;\n        const isFavorite = state.favorites.includes(dentistId);\n        return { ...state,\n          favorites: isFavorite ? state.favorites.filter(id => id !== dentistId) : [...state.favorites, dentistId]\n        };\n\n      default:\n        return state;\n    }\n  }; // const contextValue = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useMemo","initialState","dentists","theme","data","ContextGlobal","ContextProvider","children","state","dispatch","appReducer","action","type","dentistId","payload","isFavorite","favorites","includes","filter","id"],"sources":["C:/Users/clifo/OneDrive/Desktop/fe3-final-cjl/src/Components/utils/global.context.jsx"],"sourcesContent":["import React, { createContext, useReducer, useMemo } from \"react\";\r\n\r\nexport const initialState = { dentists: [], theme: \"light\", data: []}\r\n\r\nexport const ContextGlobal = createContext(initialState);\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n  const appReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case 'TOGGLE_FAVORITE':\r\n        const dentistId = action.payload;\r\n        const isFavorite = state.favorites.includes(dentistId);\r\n\r\n        return {\r\n          ...state,\r\n          favorites: isFavorite\r\n            ? state.favorites.filter((id) => id !== dentistId)\r\n            : [...state.favorites, dentistId],\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\n  // const contextValue = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{state, dispatch}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,OAA3C,QAA0D,OAA1D;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAAEC,QAAQ,EAAE,EAAZ;EAAgBC,KAAK,EAAE,OAAvB;EAAgCC,IAAI,EAAE;AAAtC,CAArB;AAEP,OAAO,MAAMC,aAAa,gBAAGP,aAAa,CAACG,YAAD,CAAnC;AAEP,OAAO,MAAMK,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EAEA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,UAAU,CAACW,UAAD,EAAaT,YAAb,CAApC;;EAEA,MAAMS,UAAU,GAAG,CAACF,KAAD,EAAQG,MAAR,KAAmB;IACpC,QAAQA,MAAM,CAACC,IAAf;MACE,KAAK,iBAAL;QACE,MAAMC,SAAS,GAAGF,MAAM,CAACG,OAAzB;QACA,MAAMC,UAAU,GAAGP,KAAK,CAACQ,SAAN,CAAgBC,QAAhB,CAAyBJ,SAAzB,CAAnB;QAEA,OAAO,EACL,GAAGL,KADE;UAELQ,SAAS,EAAED,UAAU,GACjBP,KAAK,CAACQ,SAAN,CAAgBE,MAAhB,CAAwBC,EAAD,IAAQA,EAAE,KAAKN,SAAtC,CADiB,GAEjB,CAAC,GAAGL,KAAK,CAACQ,SAAV,EAAqBH,SAArB;QAJC,CAAP;;MAMF;QACE,OAAOL,KAAP;IAZJ;EAcD,CAfD,CAL+C,CAsB/C;;;EAEA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACA,KAAD;MAAQC;IAAR,CAA/B;IAAA,UACGF;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA7BM;;GAAMD,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}