{"ast":null,"code":"var url = require(\"url\");\n\nvar URL = url.URL;\n\nvar http = require(\"http\");\n\nvar https = require(\"https\");\n\nvar Writable = require(\"stream\").Writable;\n\nvar assert = require(\"assert\");\n\nvar debug = require(\"./debug\"); // Whether to use the native URL object or the legacy url module\n\n\nvar useNativeURL = false;\n\ntry {\n  assert(new URL());\n} catch (error) {\n  useNativeURL = error.code === \"ERR_INVALID_URL\";\n} // URL fields to preserve in copy operations\n\n\nvar preservedUrlFields = [\"auth\", \"host\", \"hostname\", \"href\", \"path\", \"pathname\", \"port\", \"protocol\", \"query\", \"search\", \"hash\"]; // Create handlers that pass events from native requests\n\nvar events = [\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"];\nvar eventHandlers = Object.create(null);\nevents.forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n}); // Error types with codes\n\nvar InvalidUrlError = createErrorType(\"ERR_INVALID_URL\", \"Invalid URL\", TypeError);\nvar RedirectionError = createErrorType(\"ERR_FR_REDIRECTION_FAILURE\", \"Redirected request failed\");\nvar TooManyRedirectsError = createErrorType(\"ERR_FR_TOO_MANY_REDIRECTS\", \"Maximum number of redirects exceeded\", RedirectionError);\nvar MaxBodyLengthExceededError = createErrorType(\"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\", \"Request body larger than maxBodyLength limit\");\nvar WriteAfterEndError = createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\"); // istanbul ignore next\n\nvar destroy = Writable.prototype.destroy || noop; // An HTTP(S) request that can be redirected\n\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n\n  this._sanitizeOptions(options);\n\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = []; // Attach a callback if passed\n\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  } // React to responses of native requests\n\n\n  var self = this;\n\n  this._onNativeResponse = function (response) {\n    try {\n      self._processResponse(response);\n    } catch (cause) {\n      self.emit(\"error\", cause instanceof RedirectionError ? cause : new RedirectionError({\n        cause: cause\n      }));\n    }\n  }; // Perform the first request\n\n\n  this._performRequest();\n}\n\nRedirectableRequest.prototype = Object.create(Writable.prototype);\n\nRedirectableRequest.prototype.abort = function () {\n  destroyRequest(this._currentRequest);\n\n  this._currentRequest.abort();\n\n  this.emit(\"abort\");\n};\n\nRedirectableRequest.prototype.destroy = function (error) {\n  destroyRequest(this._currentRequest, error);\n  destroy.call(this, error);\n  return this;\n}; // Writes buffered data to the current native request\n\n\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  } // Validate input and shift parameters if necessary\n\n\n  if (!isString(data) && !isBuffer(data)) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n\n  if (isFunction(encoding)) {\n    callback = encoding;\n    encoding = null;\n  } // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n\n\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n\n    return;\n  } // Only write when we don't exceed the maximum body length\n\n\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n\n    this._requestBodyBuffers.push({\n      data: data,\n      encoding: encoding\n    });\n\n    this._currentRequest.write(data, encoding, callback);\n  } // Error when we exceed the maximum body length\n  else {\n    this.emit(\"error\", new MaxBodyLengthExceededError());\n    this.abort();\n  }\n}; // Ends the current native request\n\n\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (isFunction(data)) {\n    callback = data;\n    data = encoding = null;\n  } else if (isFunction(encoding)) {\n    callback = encoding;\n    encoding = null;\n  } // Write data if needed and end\n\n\n  if (!data) {\n    this._ended = this._ending = true;\n\n    this._currentRequest.end(null, null, callback);\n  } else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n}; // Sets a header value on the current native request\n\n\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n\n  this._currentRequest.setHeader(name, value);\n}; // Clears a header value on the current native request\n\n\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n\n  this._currentRequest.removeHeader(name);\n}; // Global timeout for all underlying requests\n\n\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  var self = this; // Destroys the socket on timeout\n\n  function destroyOnTimeout(socket) {\n    socket.setTimeout(msecs);\n    socket.removeListener(\"timeout\", socket.destroy);\n    socket.addListener(\"timeout\", socket.destroy);\n  } // Sets up a timer to trigger a timeout event\n\n\n  function startTimer(socket) {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n    }\n\n    self._timeout = setTimeout(function () {\n      self.emit(\"timeout\");\n      clearTimer();\n    }, msecs);\n    destroyOnTimeout(socket);\n  } // Stops a timeout from triggering\n\n\n  function clearTimer() {\n    // Clear the timeout\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n      self._timeout = null;\n    } // Clean up all attached listeners\n\n\n    self.removeListener(\"abort\", clearTimer);\n    self.removeListener(\"error\", clearTimer);\n    self.removeListener(\"response\", clearTimer);\n    self.removeListener(\"close\", clearTimer);\n\n    if (callback) {\n      self.removeListener(\"timeout\", callback);\n    }\n\n    if (!self.socket) {\n      self._currentRequest.removeListener(\"socket\", startTimer);\n    }\n  } // Attach callback if passed\n\n\n  if (callback) {\n    this.on(\"timeout\", callback);\n  } // Start the timer if or when the socket is opened\n\n\n  if (this.socket) {\n    startTimer(this.socket);\n  } else {\n    this._currentRequest.once(\"socket\", startTimer);\n  } // Clean up on events\n\n\n  this.on(\"socket\", destroyOnTimeout);\n  this.on(\"abort\", clearTimer);\n  this.on(\"error\", clearTimer);\n  this.on(\"response\", clearTimer);\n  this.on(\"close\", clearTimer);\n  return this;\n}; // Proxy all other public ClientRequest methods\n\n\n[\"flushHeaders\", \"getHeader\", \"setNoDelay\", \"setSocketKeepAlive\"].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n}); // Proxy all public ClientRequest properties\n\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () {\n      return this._currentRequest[property];\n    }\n  });\n});\n\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  } // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n\n\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n\n    delete options.host;\n  } // Complete the URL object when necessary\n\n\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    } else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n}; // Executes the next native request (initial or redirect)\n\n\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n\n  if (!nativeProtocol) {\n    throw new TypeError(\"Unsupported protocol \" + protocol);\n  } // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n\n\n  if (this._options.agents) {\n    var scheme = protocol.slice(0, -1);\n    this._options.agent = this._options.agents[scheme];\n  } // Create the native request and set up its event handlers\n\n\n  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);\n  request._redirectable = this;\n\n  for (var event of events) {\n    request.on(event, eventHandlers[event]);\n  } // RFC7230§5.3.1: When making a request directly to an origin server, […]\n  // a client MUST send only the absolute path […] as the request-target.\n\n\n  this._currentUrl = /^\\//.test(this._options.path) ? url.format(this._options) : // When making a request to a proxy, […]\n  // a client MUST send the target URI in absolute-form […].\n  this._options.path; // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n\n  if (this._isRedirect) {\n    // Write the request entity and end\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        } // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n          var buffer = buffers[i++];\n          /* istanbul ignore else */\n\n          if (!request.finished) {\n            request.write(buffer.data, buffer.encoding, writeNext);\n          }\n        } // End the request if `end` has been called on us\n        else if (self._ended) {\n          request.end();\n        }\n      }\n    })();\n  }\n}; // Processes a response from the current native request\n\n\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode\n    });\n  } // RFC7231§6.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n  // If the response is not a redirect; return it as-is\n\n\n  var location = response.headers.location;\n\n  if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response); // Clean up\n\n    this._requestBodyBuffers = [];\n    return;\n  } // The response is a redirect, so abort the current request\n\n\n  destroyRequest(this._currentRequest); // Discard the remainder of the response to avoid waiting for data\n\n  response.destroy(); // RFC7231§6.4: A client SHOULD detect and intervene\n  // in cyclical redirections (i.e., \"infinite\" redirection loops).\n\n  if (++this._redirectCount > this._options.maxRedirects) {\n    throw new TooManyRedirectsError();\n  } // Store the request headers if applicable\n\n\n  var requestHeaders;\n  var beforeRedirect = this._options.beforeRedirect;\n\n  if (beforeRedirect) {\n    requestHeaders = Object.assign({\n      // The Host header was set by nativeProtocol.request\n      Host: response.req.getHeader(\"host\")\n    }, this._options.headers);\n  } // RFC7231§6.4: Automatic redirection needs to done with\n  // care for methods not known to be safe, […]\n  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change\n  // the request method from POST to GET for the subsequent request.\n\n\n  var method = this._options.method;\n\n  if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that\n  // the server is redirecting the user agent to a different resource […]\n  // A user agent can perform a retrieval request targeting that URI\n  // (a GET or HEAD request if using HTTP) […]\n  statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n    this._options.method = \"GET\"; // Drop a possible entity and headers related to it\n\n    this._requestBodyBuffers = [];\n    removeMatchingHeaders(/^content-/i, this._options.headers);\n  } // Drop the Host header, as the redirect might lead to a different host\n\n\n  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers); // If the redirect is relative, carry over the host of the last request\n\n  var currentUrlParts = parseUrl(this._currentUrl);\n  var currentHost = currentHostHeader || currentUrlParts.host;\n  var currentUrl = /^\\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, {\n    host: currentHost\n  })); // Create the redirected request\n\n  var redirectUrl = resolveUrl(location, currentUrl);\n  debug(\"redirecting to\", redirectUrl.href);\n  this._isRedirect = true;\n  spreadUrlObject(redirectUrl, this._options); // Drop confidential headers when redirecting to a less secure protocol\n  // or to a different domain that is not a superdomain\n\n  if (redirectUrl.protocol !== currentUrlParts.protocol && redirectUrl.protocol !== \"https:\" || redirectUrl.host !== currentHost && !isSubdomain(redirectUrl.host, currentHost)) {\n    removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);\n  } // Evaluate the beforeRedirect callback\n\n\n  if (isFunction(beforeRedirect)) {\n    var responseDetails = {\n      headers: response.headers,\n      statusCode: statusCode\n    };\n    var requestDetails = {\n      url: currentUrl,\n      method: method,\n      headers: requestHeaders\n    };\n    beforeRedirect(this._options, responseDetails, requestDetails);\n\n    this._sanitizeOptions(this._options);\n  } // Perform the redirected request\n\n\n  this._performRequest();\n}; // Wraps the key/value object of protocols with redirect functionality\n\n\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024\n  }; // Wrap each protocol\n\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol); // Executes a request, following redirects\n\n    function request(input, options, callback) {\n      // Parse parameters, ensuring that input is an object\n      if (isURL(input)) {\n        input = spreadUrlObject(input);\n      } else if (isString(input)) {\n        input = spreadUrlObject(parseUrl(input));\n      } else {\n        callback = options;\n        options = validateUrl(input);\n        input = {\n          protocol: protocol\n        };\n      }\n\n      if (isFunction(options)) {\n        callback = options;\n        options = null;\n      } // Set defaults\n\n\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n\n      if (!isString(options.host) && !isString(options.hostname)) {\n        options.hostname = \"::1\";\n      }\n\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    } // Executes a GET request, following redirects\n\n\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    } // Expose the properties on the wrapped protocol\n\n\n    Object.defineProperties(wrappedProtocol, {\n      request: {\n        value: request,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      },\n      get: {\n        value: get,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }\n    });\n  });\n  return exports;\n}\n\nfunction noop() {\n  /* empty */\n}\n\nfunction parseUrl(input) {\n  var parsed;\n  /* istanbul ignore else */\n\n  if (useNativeURL) {\n    parsed = new URL(input);\n  } else {\n    // Ensure the URL is valid and absolute\n    parsed = validateUrl(url.parse(input));\n\n    if (!isString(parsed.protocol)) {\n      throw new InvalidUrlError({\n        input\n      });\n    }\n  }\n\n  return parsed;\n}\n\nfunction resolveUrl(relative, base) {\n  /* istanbul ignore next */\n  return useNativeURL ? new URL(relative, base) : parseUrl(url.resolve(base, relative));\n}\n\nfunction validateUrl(input) {\n  if (/^\\[/.test(input.hostname) && !/^\\[[:0-9a-f]+\\]$/i.test(input.hostname)) {\n    throw new InvalidUrlError({\n      input: input.href || input\n    });\n  }\n\n  if (/^\\[/.test(input.host) && !/^\\[[:0-9a-f]+\\](:\\d+)?$/i.test(input.host)) {\n    throw new InvalidUrlError({\n      input: input.href || input\n    });\n  }\n\n  return input;\n}\n\nfunction spreadUrlObject(urlObject, target) {\n  var spread = target || {};\n\n  for (var key of preservedUrlFields) {\n    spread[key] = urlObject[key];\n  } // Fix IPv6 hostname\n\n\n  if (spread.hostname.startsWith(\"[\")) {\n    spread.hostname = spread.hostname.slice(1, -1);\n  } // Ensure port is a number\n\n\n  if (spread.port !== \"\") {\n    spread.port = Number(spread.port);\n  } // Concatenate path\n\n\n  spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;\n  return spread;\n}\n\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header];\n      delete headers[header];\n    }\n  }\n\n  return lastValue === null || typeof lastValue === \"undefined\" ? undefined : String(lastValue).trim();\n}\n\nfunction createErrorType(code, message, baseClass) {\n  // Create constructor\n  function CustomError(properties) {\n    Error.captureStackTrace(this, this.constructor);\n    Object.assign(this, properties || {});\n    this.code = code;\n    this.message = this.cause ? message + \": \" + this.cause.message : message;\n  } // Attach constructor and set default properties\n\n\n  CustomError.prototype = new (baseClass || Error)();\n  Object.defineProperties(CustomError.prototype, {\n    constructor: {\n      value: CustomError,\n      enumerable: false\n    },\n    name: {\n      value: \"Error [\" + code + \"]\",\n      enumerable: false\n    }\n  });\n  return CustomError;\n}\n\nfunction destroyRequest(request, error) {\n  for (var event of events) {\n    request.removeListener(event, eventHandlers[event]);\n  }\n\n  request.on(\"error\", noop);\n  request.destroy(error);\n}\n\nfunction isSubdomain(subdomain, domain) {\n  assert(isString(subdomain) && isString(domain));\n  var dot = subdomain.length - domain.length - 1;\n  return dot > 0 && subdomain[dot] === \".\" && subdomain.endsWith(domain);\n}\n\nfunction isString(value) {\n  return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\n\nfunction isBuffer(value) {\n  return typeof value === \"object\" && \"length\" in value;\n}\n\nfunction isURL(value) {\n  return URL && value instanceof URL;\n} // Exports\n\n\nmodule.exports = wrap({\n  http: http,\n  https: https\n});\nmodule.exports.wrap = wrap;","map":{"version":3,"names":["url","require","URL","http","https","Writable","assert","debug","useNativeURL","error","code","preservedUrlFields","events","eventHandlers","Object","create","forEach","event","arg1","arg2","arg3","_redirectable","emit","InvalidUrlError","createErrorType","TypeError","RedirectionError","TooManyRedirectsError","MaxBodyLengthExceededError","WriteAfterEndError","destroy","prototype","noop","RedirectableRequest","options","responseCallback","call","_sanitizeOptions","_options","_ended","_ending","_redirectCount","_redirects","_requestBodyLength","_requestBodyBuffers","on","self","_onNativeResponse","response","_processResponse","cause","_performRequest","abort","destroyRequest","_currentRequest","write","data","encoding","callback","isString","isBuffer","isFunction","length","maxBodyLength","push","end","currentRequest","setHeader","name","value","headers","removeHeader","setTimeout","msecs","destroyOnTimeout","socket","removeListener","addListener","startTimer","_timeout","clearTimeout","clearTimer","once","method","a","b","property","defineProperty","get","host","hostname","pathname","path","searchPos","indexOf","substring","search","protocol","nativeProtocol","nativeProtocols","agents","scheme","slice","agent","request","_currentUrl","test","format","_isRedirect","i","buffers","writeNext","buffer","finished","statusCode","trackRedirects","location","followRedirects","responseUrl","redirects","maxRedirects","requestHeaders","beforeRedirect","assign","Host","req","getHeader","removeMatchingHeaders","currentHostHeader","currentUrlParts","parseUrl","currentHost","currentUrl","redirectUrl","resolveUrl","href","spreadUrlObject","isSubdomain","responseDetails","requestDetails","wrap","protocols","exports","keys","wrappedProtocol","input","isURL","validateUrl","equal","wrappedRequest","defineProperties","configurable","enumerable","writable","parsed","parse","relative","base","resolve","urlObject","target","spread","key","startsWith","port","Number","regex","lastValue","header","undefined","String","trim","message","baseClass","CustomError","properties","Error","captureStackTrace","constructor","subdomain","domain","dot","endsWith","module"],"sources":["C:/Users/clifo/OneDrive/Desktop/fe3-final-cjl/node_modules/follow-redirects/index.js"],"sourcesContent":["var url = require(\"url\");\nvar URL = url.URL;\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar Writable = require(\"stream\").Writable;\nvar assert = require(\"assert\");\nvar debug = require(\"./debug\");\n\n// Whether to use the native URL object or the legacy url module\nvar useNativeURL = false;\ntry {\n  assert(new URL());\n}\ncatch (error) {\n  useNativeURL = error.code === \"ERR_INVALID_URL\";\n}\n\n// URL fields to preserve in copy operations\nvar preservedUrlFields = [\n  \"auth\",\n  \"host\",\n  \"hostname\",\n  \"href\",\n  \"path\",\n  \"pathname\",\n  \"port\",\n  \"protocol\",\n  \"query\",\n  \"search\",\n  \"hash\",\n];\n\n// Create handlers that pass events from native requests\nvar events = [\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"];\nvar eventHandlers = Object.create(null);\nevents.forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n});\n\n// Error types with codes\nvar InvalidUrlError = createErrorType(\n  \"ERR_INVALID_URL\",\n  \"Invalid URL\",\n  TypeError\n);\nvar RedirectionError = createErrorType(\n  \"ERR_FR_REDIRECTION_FAILURE\",\n  \"Redirected request failed\"\n);\nvar TooManyRedirectsError = createErrorType(\n  \"ERR_FR_TOO_MANY_REDIRECTS\",\n  \"Maximum number of redirects exceeded\",\n  RedirectionError\n);\nvar MaxBodyLengthExceededError = createErrorType(\n  \"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\",\n  \"Request body larger than maxBodyLength limit\"\n);\nvar WriteAfterEndError = createErrorType(\n  \"ERR_STREAM_WRITE_AFTER_END\",\n  \"write after end\"\n);\n\n// istanbul ignore next\nvar destroy = Writable.prototype.destroy || noop;\n\n// An HTTP(S) request that can be redirected\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n  this._sanitizeOptions(options);\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = [];\n\n  // Attach a callback if passed\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  }\n\n  // React to responses of native requests\n  var self = this;\n  this._onNativeResponse = function (response) {\n    try {\n      self._processResponse(response);\n    }\n    catch (cause) {\n      self.emit(\"error\", cause instanceof RedirectionError ?\n        cause : new RedirectionError({ cause: cause }));\n    }\n  };\n\n  // Perform the first request\n  this._performRequest();\n}\nRedirectableRequest.prototype = Object.create(Writable.prototype);\n\nRedirectableRequest.prototype.abort = function () {\n  destroyRequest(this._currentRequest);\n  this._currentRequest.abort();\n  this.emit(\"abort\");\n};\n\nRedirectableRequest.prototype.destroy = function (error) {\n  destroyRequest(this._currentRequest, error);\n  destroy.call(this, error);\n  return this;\n};\n\n// Writes buffered data to the current native request\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  }\n\n  // Validate input and shift parameters if necessary\n  if (!isString(data) && !isBuffer(data)) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n  if (isFunction(encoding)) {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n    return;\n  }\n  // Only write when we don't exceed the maximum body length\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n    this._requestBodyBuffers.push({ data: data, encoding: encoding });\n    this._currentRequest.write(data, encoding, callback);\n  }\n  // Error when we exceed the maximum body length\n  else {\n    this.emit(\"error\", new MaxBodyLengthExceededError());\n    this.abort();\n  }\n};\n\n// Ends the current native request\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (isFunction(data)) {\n    callback = data;\n    data = encoding = null;\n  }\n  else if (isFunction(encoding)) {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Write data if needed and end\n  if (!data) {\n    this._ended = this._ending = true;\n    this._currentRequest.end(null, null, callback);\n  }\n  else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n};\n\n// Sets a header value on the current native request\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n  this._currentRequest.setHeader(name, value);\n};\n\n// Clears a header value on the current native request\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n  this._currentRequest.removeHeader(name);\n};\n\n// Global timeout for all underlying requests\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  var self = this;\n\n  // Destroys the socket on timeout\n  function destroyOnTimeout(socket) {\n    socket.setTimeout(msecs);\n    socket.removeListener(\"timeout\", socket.destroy);\n    socket.addListener(\"timeout\", socket.destroy);\n  }\n\n  // Sets up a timer to trigger a timeout event\n  function startTimer(socket) {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n    }\n    self._timeout = setTimeout(function () {\n      self.emit(\"timeout\");\n      clearTimer();\n    }, msecs);\n    destroyOnTimeout(socket);\n  }\n\n  // Stops a timeout from triggering\n  function clearTimer() {\n    // Clear the timeout\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n      self._timeout = null;\n    }\n\n    // Clean up all attached listeners\n    self.removeListener(\"abort\", clearTimer);\n    self.removeListener(\"error\", clearTimer);\n    self.removeListener(\"response\", clearTimer);\n    self.removeListener(\"close\", clearTimer);\n    if (callback) {\n      self.removeListener(\"timeout\", callback);\n    }\n    if (!self.socket) {\n      self._currentRequest.removeListener(\"socket\", startTimer);\n    }\n  }\n\n  // Attach callback if passed\n  if (callback) {\n    this.on(\"timeout\", callback);\n  }\n\n  // Start the timer if or when the socket is opened\n  if (this.socket) {\n    startTimer(this.socket);\n  }\n  else {\n    this._currentRequest.once(\"socket\", startTimer);\n  }\n\n  // Clean up on events\n  this.on(\"socket\", destroyOnTimeout);\n  this.on(\"abort\", clearTimer);\n  this.on(\"error\", clearTimer);\n  this.on(\"response\", clearTimer);\n  this.on(\"close\", clearTimer);\n\n  return this;\n};\n\n// Proxy all other public ClientRequest methods\n[\n  \"flushHeaders\", \"getHeader\",\n  \"setNoDelay\", \"setSocketKeepAlive\",\n].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n});\n\n// Proxy all public ClientRequest properties\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () { return this._currentRequest[property]; },\n  });\n});\n\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n  }\n\n  // Complete the URL object when necessary\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    }\n    else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n};\n\n\n// Executes the next native request (initial or redirect)\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n  if (!nativeProtocol) {\n    throw new TypeError(\"Unsupported protocol \" + protocol);\n  }\n\n  // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n  if (this._options.agents) {\n    var scheme = protocol.slice(0, -1);\n    this._options.agent = this._options.agents[scheme];\n  }\n\n  // Create the native request and set up its event handlers\n  var request = this._currentRequest =\n        nativeProtocol.request(this._options, this._onNativeResponse);\n  request._redirectable = this;\n  for (var event of events) {\n    request.on(event, eventHandlers[event]);\n  }\n\n  // RFC7230§5.3.1: When making a request directly to an origin server, […]\n  // a client MUST send only the absolute path […] as the request-target.\n  this._currentUrl = /^\\//.test(this._options.path) ?\n    url.format(this._options) :\n    // When making a request to a proxy, […]\n    // a client MUST send the target URI in absolute-form […].\n    this._options.path;\n\n  // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n  if (this._isRedirect) {\n    // Write the request entity and end\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        }\n        // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n          var buffer = buffers[i++];\n          /* istanbul ignore else */\n          if (!request.finished) {\n            request.write(buffer.data, buffer.encoding, writeNext);\n          }\n        }\n        // End the request if `end` has been called on us\n        else if (self._ended) {\n          request.end();\n        }\n      }\n    }());\n  }\n};\n\n// Processes a response from the current native request\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode,\n    });\n  }\n\n  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n\n  // If the response is not a redirect; return it as-is\n  var location = response.headers.location;\n  if (!location || this._options.followRedirects === false ||\n      statusCode < 300 || statusCode >= 400) {\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response);\n\n    // Clean up\n    this._requestBodyBuffers = [];\n    return;\n  }\n\n  // The response is a redirect, so abort the current request\n  destroyRequest(this._currentRequest);\n  // Discard the remainder of the response to avoid waiting for data\n  response.destroy();\n\n  // RFC7231§6.4: A client SHOULD detect and intervene\n  // in cyclical redirections (i.e., \"infinite\" redirection loops).\n  if (++this._redirectCount > this._options.maxRedirects) {\n    throw new TooManyRedirectsError();\n  }\n\n  // Store the request headers if applicable\n  var requestHeaders;\n  var beforeRedirect = this._options.beforeRedirect;\n  if (beforeRedirect) {\n    requestHeaders = Object.assign({\n      // The Host header was set by nativeProtocol.request\n      Host: response.req.getHeader(\"host\"),\n    }, this._options.headers);\n  }\n\n  // RFC7231§6.4: Automatic redirection needs to done with\n  // care for methods not known to be safe, […]\n  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change\n  // the request method from POST to GET for the subsequent request.\n  var method = this._options.method;\n  if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" ||\n      // RFC7231§6.4.4: The 303 (See Other) status code indicates that\n      // the server is redirecting the user agent to a different resource […]\n      // A user agent can perform a retrieval request targeting that URI\n      // (a GET or HEAD request if using HTTP) […]\n      (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n    this._options.method = \"GET\";\n    // Drop a possible entity and headers related to it\n    this._requestBodyBuffers = [];\n    removeMatchingHeaders(/^content-/i, this._options.headers);\n  }\n\n  // Drop the Host header, as the redirect might lead to a different host\n  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);\n\n  // If the redirect is relative, carry over the host of the last request\n  var currentUrlParts = parseUrl(this._currentUrl);\n  var currentHost = currentHostHeader || currentUrlParts.host;\n  var currentUrl = /^\\w+:/.test(location) ? this._currentUrl :\n    url.format(Object.assign(currentUrlParts, { host: currentHost }));\n\n  // Create the redirected request\n  var redirectUrl = resolveUrl(location, currentUrl);\n  debug(\"redirecting to\", redirectUrl.href);\n  this._isRedirect = true;\n  spreadUrlObject(redirectUrl, this._options);\n\n  // Drop confidential headers when redirecting to a less secure protocol\n  // or to a different domain that is not a superdomain\n  if (redirectUrl.protocol !== currentUrlParts.protocol &&\n     redirectUrl.protocol !== \"https:\" ||\n     redirectUrl.host !== currentHost &&\n     !isSubdomain(redirectUrl.host, currentHost)) {\n    removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);\n  }\n\n  // Evaluate the beforeRedirect callback\n  if (isFunction(beforeRedirect)) {\n    var responseDetails = {\n      headers: response.headers,\n      statusCode: statusCode,\n    };\n    var requestDetails = {\n      url: currentUrl,\n      method: method,\n      headers: requestHeaders,\n    };\n    beforeRedirect(this._options, responseDetails, requestDetails);\n    this._sanitizeOptions(this._options);\n  }\n\n  // Perform the redirected request\n  this._performRequest();\n};\n\n// Wraps the key/value object of protocols with redirect functionality\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024,\n  };\n\n  // Wrap each protocol\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);\n\n    // Executes a request, following redirects\n    function request(input, options, callback) {\n      // Parse parameters, ensuring that input is an object\n      if (isURL(input)) {\n        input = spreadUrlObject(input);\n      }\n      else if (isString(input)) {\n        input = spreadUrlObject(parseUrl(input));\n      }\n      else {\n        callback = options;\n        options = validateUrl(input);\n        input = { protocol: protocol };\n      }\n      if (isFunction(options)) {\n        callback = options;\n        options = null;\n      }\n\n      // Set defaults\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength,\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      if (!isString(options.host) && !isString(options.hostname)) {\n        options.hostname = \"::1\";\n      }\n\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    }\n\n    // Executes a GET request, following redirects\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    }\n\n    // Expose the properties on the wrapped protocol\n    Object.defineProperties(wrappedProtocol, {\n      request: { value: request, configurable: true, enumerable: true, writable: true },\n      get: { value: get, configurable: true, enumerable: true, writable: true },\n    });\n  });\n  return exports;\n}\n\nfunction noop() { /* empty */ }\n\nfunction parseUrl(input) {\n  var parsed;\n  /* istanbul ignore else */\n  if (useNativeURL) {\n    parsed = new URL(input);\n  }\n  else {\n    // Ensure the URL is valid and absolute\n    parsed = validateUrl(url.parse(input));\n    if (!isString(parsed.protocol)) {\n      throw new InvalidUrlError({ input });\n    }\n  }\n  return parsed;\n}\n\nfunction resolveUrl(relative, base) {\n  /* istanbul ignore next */\n  return useNativeURL ? new URL(relative, base) : parseUrl(url.resolve(base, relative));\n}\n\nfunction validateUrl(input) {\n  if (/^\\[/.test(input.hostname) && !/^\\[[:0-9a-f]+\\]$/i.test(input.hostname)) {\n    throw new InvalidUrlError({ input: input.href || input });\n  }\n  if (/^\\[/.test(input.host) && !/^\\[[:0-9a-f]+\\](:\\d+)?$/i.test(input.host)) {\n    throw new InvalidUrlError({ input: input.href || input });\n  }\n  return input;\n}\n\nfunction spreadUrlObject(urlObject, target) {\n  var spread = target || {};\n  for (var key of preservedUrlFields) {\n    spread[key] = urlObject[key];\n  }\n\n  // Fix IPv6 hostname\n  if (spread.hostname.startsWith(\"[\")) {\n    spread.hostname = spread.hostname.slice(1, -1);\n  }\n  // Ensure port is a number\n  if (spread.port !== \"\") {\n    spread.port = Number(spread.port);\n  }\n  // Concatenate path\n  spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;\n\n  return spread;\n}\n\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header];\n      delete headers[header];\n    }\n  }\n  return (lastValue === null || typeof lastValue === \"undefined\") ?\n    undefined : String(lastValue).trim();\n}\n\nfunction createErrorType(code, message, baseClass) {\n  // Create constructor\n  function CustomError(properties) {\n    Error.captureStackTrace(this, this.constructor);\n    Object.assign(this, properties || {});\n    this.code = code;\n    this.message = this.cause ? message + \": \" + this.cause.message : message;\n  }\n\n  // Attach constructor and set default properties\n  CustomError.prototype = new (baseClass || Error)();\n  Object.defineProperties(CustomError.prototype, {\n    constructor: {\n      value: CustomError,\n      enumerable: false,\n    },\n    name: {\n      value: \"Error [\" + code + \"]\",\n      enumerable: false,\n    },\n  });\n  return CustomError;\n}\n\nfunction destroyRequest(request, error) {\n  for (var event of events) {\n    request.removeListener(event, eventHandlers[event]);\n  }\n  request.on(\"error\", noop);\n  request.destroy(error);\n}\n\nfunction isSubdomain(subdomain, domain) {\n  assert(isString(subdomain) && isString(domain));\n  var dot = subdomain.length - domain.length - 1;\n  return dot > 0 && subdomain[dot] === \".\" && subdomain.endsWith(domain);\n}\n\nfunction isString(value) {\n  return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\n\nfunction isBuffer(value) {\n  return typeof value === \"object\" && (\"length\" in value);\n}\n\nfunction isURL(value) {\n  return URL && value instanceof URL;\n}\n\n// Exports\nmodule.exports = wrap({ http: http, https: https });\nmodule.exports.wrap = wrap;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}