{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clifo\\\\OneDrive\\\\Desktop\\\\fe3-final-cjl\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  dentisttheme: \"light\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(initialState);\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ContextProvider;\n\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE_THEME\":\n      return { ...state,\n        theme: action.payload\n      };\n\n    case \"ADD_FAV\":\n      return { ...state,\n        data: [...state.data, action.payload]\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useReducer","initialState","dentisttheme","data","ContextGlobal","ContextProvider","children","state","dispatch","appReducer","action","type","theme","payload"],"sources":["C:/Users/clifo/OneDrive/Desktop/fe3-final-cjl/src/Components/utils/global.context.jsx"],"sourcesContent":["import React, { createContext, useReducer } from \"react\";\r\n\r\nexport const initialState = { dentisttheme: \"light\", data: []}\r\n\r\nexport const ContextGlobal = createContext(initialState);\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{state, dispatch}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n\r\n\r\nconst appReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_THEME\":\r\n      return {\r\n        ...state,\r\n        theme: action.payload,\r\n      };\r\n    case \"ADD_FAV\":\r\n      return {\r\n        ...state,\r\n        data: [...state.data, action.payload],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAAEC,YAAY,EAAE,OAAhB;EAAyBC,IAAI,EAAE;AAA/B,CAArB;AAEP,OAAO,MAAMC,aAAa,gBAAGL,aAAa,CAACE,YAAD,CAAnC;AAEP,OAAO,MAAMI,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EAEA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,UAAU,CAACS,UAAD,EAAaR,YAAb,CAApC;EAEA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACM,KAAD;MAAQC;IAAR,CAA/B;IAAA,UACGF;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAVM;;GAAMD,e;;KAAAA,e;;AAab,MAAMI,UAAU,GAAG,CAACF,KAAD,EAAQG,MAAR,KAAmB;EACpC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,cAAL;MACE,OAAO,EACL,GAAGJ,KADE;QAELK,KAAK,EAAEF,MAAM,CAACG;MAFT,CAAP;;IAIF,KAAK,SAAL;MACE,OAAO,EACL,GAAGN,KADE;QAELJ,IAAI,EAAE,CAAC,GAAGI,KAAK,CAACJ,IAAV,EAAgBO,MAAM,CAACG,OAAvB;MAFD,CAAP;;IAIF;MACE,OAAON,KAAP;EAZJ;AAcD,CAfD"},"metadata":{},"sourceType":"module"}