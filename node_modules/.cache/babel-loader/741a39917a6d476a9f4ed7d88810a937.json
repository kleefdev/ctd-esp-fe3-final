{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clifo\\\\OneDrive\\\\Desktop\\\\fe3-final-cjl\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer, useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const themes = {\n  light: {\n    background: \"white\",\n    font: \"black\"\n  },\n  dark: {\n    background: \"black\",\n    color: \"white\"\n  }\n};\nexport const initialState = {\n  dentists: [],\n  theme: \"light\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(initialState);\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [state, dispatch] = useReducer(appReducer, initialState); // const contextValue = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useMemo","themes","light","background","font","dark","color","initialState","dentists","theme","data","ContextGlobal","ContextProvider","children","state","dispatch","appReducer"],"sources":["C:/Users/clifo/OneDrive/Desktop/fe3-final-cjl/src/Components/utils/global.context.jsx"],"sourcesContent":["import React, { createContext, useReducer, useMemo } from \"react\";\r\n\r\nexport const themes= {\r\n  light: {\r\n    background: \"white\",\r\n    font: \"black\",\r\n  },\r\n  dark: {\r\n    background: \"black\",\r\n    color: \"white\",\r\n  }\r\n};\r\n\r\nexport const initialState = { dentists: [], theme: \"light\", data: []}\r\n\r\nexport const ContextGlobal = createContext(initialState);\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n  // const contextValue = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{state, dispatch}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,OAA3C,QAA0D,OAA1D;;AAEA,OAAO,MAAMC,MAAM,GAAE;EACnBC,KAAK,EAAE;IACLC,UAAU,EAAE,OADP;IAELC,IAAI,EAAE;EAFD,CADY;EAKnBC,IAAI,EAAE;IACJF,UAAU,EAAE,OADR;IAEJG,KAAK,EAAE;EAFH;AALa,CAAd;AAWP,OAAO,MAAMC,YAAY,GAAG;EAAEC,QAAQ,EAAE,EAAZ;EAAgBC,KAAK,EAAE,OAAvB;EAAgCC,IAAI,EAAE;AAAtC,CAArB;AAEP,OAAO,MAAMC,aAAa,gBAAGb,aAAa,CAACS,YAAD,CAAnC;AAEP,OAAO,MAAMK,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EAEA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,UAAU,CAACiB,UAAD,EAAaT,YAAb,CAApC,CAH+C,CAK/C;;EAIA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACO,KAAD;MAAQC;IAAR,CAA/B;IAAA,UACGF;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAdM;;GAAMD,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}